# Generated by Django 2.1.3 on 2018-12-13 09:26

import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('identity', models.CharField(max_length=7, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('deleted', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('password', models.CharField(max_length=32)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('af_name', models.CharField(max_length=150)),
                ('af_description', models.CharField(max_length=250)),
                ('af_applied', models.DateTimeField()),
                ('af_valid_from', models.DateTimeField()),
                ('af_valid_till', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=200)),
                ('votes', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='GF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gf_name', models.CharField(max_length=150)),
                ('gf_description', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='Orga',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team', models.CharField(max_length=100)),
                ('theme_owner', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=200)),
                ('pub_date', models.DateTimeField(verbose_name='Date publisched')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(max_length=150)),
                ('role_description', models.CharField(max_length=250)),
                ('afs', models.ManyToManyField(related_name='owningRole', to='myRDB.AF')),
            ],
        ),
        migrations.CreateModel(
            name='TF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tf_name', models.CharField(max_length=100)),
                ('tf_description', models.CharField(max_length=300)),
                ('criticality', models.CharField(choices=[(1, ' '), (2, 'K'), (3, 'U')], max_length=1)),
                ('highest_criticality_in_AF', models.CharField(choices=[(1, ' '), (2, 'K'), (3, 'U')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='TF_Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ZI_Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zi_organisation_name', models.CharField(max_length=5)),
            ],
        ),
        migrations.AddField(
            model_name='tf',
            name='tf_application',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myRDB.TF_Application'),
        ),
        migrations.AddField(
            model_name='tf',
            name='tf_owner_orga',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myRDB.Orga'),
        ),
        migrations.AddField(
            model_name='gf',
            name='tfs',
            field=models.ManyToManyField(related_name='owningGF', to='myRDB.TF'),
        ),
        migrations.AddField(
            model_name='choice',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myRDB.Question'),
        ),
        migrations.AddField(
            model_name='af',
            name='gfs',
            field=models.ManyToManyField(related_name='owningAF', to='myRDB.GF'),
        ),
        migrations.AddField(
            model_name='user',
            name='department_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myRDB.Department'),
        ),
        migrations.AddField(
            model_name='user',
            name='direct_connect_afs',
            field=models.ManyToManyField(related_name='afOwningUser', to='myRDB.AF'),
        ),
        migrations.AddField(
            model_name='user',
            name='direct_connect_gfs',
            field=models.ManyToManyField(related_name='gfOwningUser', to='myRDB.GF'),
        ),
        migrations.AddField(
            model_name='user',
            name='direct_connect_tfs',
            field=models.ManyToManyField(related_name='tfOwningUser', to='myRDB.TF'),
        ),
        migrations.AddField(
            model_name='user',
            name='group_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myRDB.Group'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True,
                                         help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                         related_name='user_set', related_query_name='user', to='auth.Group',
                                         verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='orga_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myRDB.Orga'),
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(to='myRDB.Role'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                         related_name='user_set', related_query_name='user', to='auth.Permission',
                                         verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='zi_organisation_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myRDB.ZI_Organisation'),
        ),
    ]
